package com.xcrj.offersa.pass1;

import java.util.Arrays;

/**
 * 剑指 Offer II 091. 粉刷房子
 * 假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。
 * 当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个n x 3的正整数矩阵 costs 来表示的。
 * 例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。
 * 请计算出粉刷完所有房子最少的花费成本。
 * <p>
 * 分析
 * - 每个房子可以被粉刷成三种颜色中的一种，需要计算在满足相邻房子的颜色不同的情况下粉刷所有房子的最小花费成本
 */
public class Solution91 {

    /**
     * 动态规划+滚动数组
     * 动态规划：将多阶段过程转换为单阶段问题，将单阶段问题的解存储在动态规划数组中
     */
    public int minCost(int[][] costs) {
        // 每套房被刷成每种颜色的总成本都被记录了
        // 记录从第一套房到当前房 被刷成3种不同颜色颜色的总成本
        int[] sum3 = new int[3];
        // 第1套房被刷成3中颜色的成本
        for (int j = 0; j < 3; j++) {
            sum3[j] = costs[0][j];
        }

        // 从第0套房到第i套房 被刷成3种不同颜色的总成本
        for (int i = 1; i < costs.length; i++) {
            // 从第0套房到新房被刷成 被刷成3种不同颜色的总成本
            int[] sum3New = new int[3];
            for (int j = 0; j < 3; j++) {
                /**
                 * 当前房被刷成的颜色不能与前一间房的颜色相同 且 前一间房被刷成的颜色成本最低
                 *
                 * dp[i][0]=min(dp[i−1][1],dp[i−1][2])+costs[i][0]
                 * j=0,新房被刷成红色的总成本=前一房子被刷成黄色和蓝色的最小总成本+新房被刷成红色的成本
                 *
                 * dp[i][1]=min(dp[i−1][0],dp[i−1][2])+costs[i][1]
                 * j=1,新房被刷成黄色的总成本=前一房子被刷成红色和蓝色的最小总成本+新房被刷成黄色的成本
                 *
                 * dp[i][2]=min(dp[i−1][0],dp[i−1][1])+costs[i][2]
                 * j=2,新房被刷成蓝色的总成本=前一房子被刷成红色和黄色的最小总成本+新房被刷成蓝色的成本
                 */
                sum3New[j] = Math.min(sum3[(j + 1) % 3], sum3[(j + 2) % 3]) + costs[i][j];
            }
            sum3 = sum3New;
        }

        // 每套房被刷成每种颜色的总成本都被记录了，找最小的成本
        return Arrays.stream(sum3).min().getAsInt();
    }
}
